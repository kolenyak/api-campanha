/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.sergio.apicampanha.v1.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import br.com.sergio.apicampanha.v1.model.Campanha;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "times")
public interface TimesApi {

	/**
	 * Endpoint para listagem das campanhas de acordo com o time do coração
	 * 
	 * @return {@link List} of {@link Campanha}
	 */
    @ApiOperation(value = "Retorna as campanhas associadas ao time", notes = "", 
    			response = Campanha.class, 
    			tags={ "times", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Campanha.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Id inválido"),
        @ApiResponse(code = 404, message = "Time não encontrado") })
    @RequestMapping(value = "/times/{idTime}/campanhas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @ResponseBody
	@ResponseStatus(HttpStatus.OK)
    List<Campanha> listaCampanhasPeloTime(@ApiParam(value = "Id da time pesquisado", required=true) Integer idTime);


    /**
	 * Endpoint para listagem das campanhas de acordo com o time do coração e o cliente
	 * 
	 * @return {@link List} of {@link Campanha}
	 */
    @ApiOperation(value = "Retorna as campanhas do time/cliente", 
    		notes = "Pesquisa as campanhas associadas ao id do time e ao id do cliente", 
    		response = Campanha.class, responseContainer = "List", 
    		tags={ "times", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Campanha.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Id inválido"),
        @ApiResponse(code = 404, message = "Time ou Cliente não encontrado") })
    @RequestMapping(value = "/times/{idTime}/clientes/{idCliente}/campanhas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @ResponseBody
	@ResponseStatus(HttpStatus.OK)
    List<Campanha> listaCampanhasPeloTimeECliente(
    		@ApiParam(value = "Id do time pesquisado", required=true ) Integer idTime,
    		@ApiParam(value = "Id do cliente pesquisado", required=true ) Integer idCliente);

}
